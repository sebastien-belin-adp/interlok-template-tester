plugins {
  id 'java-library'
  id 'maven-publish'
  id 'jacoco'
  id 'com.github.spotbugs' version '5.2.1'
  id 'de.undercouch.download' version '5.5.0'
}

ext {
  interlokCoreVersion = project.findProperty('interlokCoreVersion') ?: '4.9-SNAPSHOT'
  releaseVersion = project.findProperty('releaseVersion') ?: '4.9-SNAPSHOT'
  nexusBaseUrl = project.findProperty('nexusBaseUrl') ?: 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.findProperty('mavenPublishUrl') ?: nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.findProperty('repoUsername') ?: 'unknown'
  repoPassword = project.findProperty('repoPassword') ?: 'unknown'
  defaultNexusRepo = project.findProperty('defaultNexusRepo') ?: 'unknown'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokTemplateZipUrl = 'https://github.com/adaptris/interlok-templates/archive/master.zip'

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok Template Tester'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '2.0.11'
  junitJupiterVersion = '5.10.0'
  mockitoVersion = '5.2.0'
  sonicVersion = '8.5.0'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}
ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

sourceCompatibility = 11
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// Disable gradle module generation since we probably don't want
// xxx.module files in your repository.
tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

repositories {
  mavenCentral()
  if (defaultNexusRepo != "unknown") {
    maven {
      url "$defaultNexusRepo"
      allowInsecureProtocol true
    }
  }

  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
  maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url "$nexusBaseUrl/content/groups/private"
  }
}

configurations {
  javadoc {}
  mavenDeploy{}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  all*.exclude group: 'javax.el', module: 'javax.el-api'
  all*.exclude group: 'org.hibernate', module: 'hibernate-validator'
  // INTERLOK-3197 exclude old javax.mail
  all*.exclude group: 'com.sun.mail', module: 'javax.mail'
  all*.exclude group: 'javax.validation', module: 'validation-api'
  all*.exclude group: 'javax.activation', module: 'activation'
  all*.exclude group: 'javax.activation', module: 'javax.activation-api'

  // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
  all*.exclude group: 'com.jcraft', module: 'jsch'

  // module exclusions for java 11.
  if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
    all*.exclude group: "xml-apis", module: "xml-apis"
    all*.exclude group: "stax", module: "stax-api"
    all*.exclude group: "org.apache.geronimo.specs", module: "geronimo-jta_1.1_spec"
  }
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  implementation  ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
  implementation  ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}

  implementation ("org.slf4j:slf4j-api:$slf4jVersion")

  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

  testImplementation ("com.adaptris:interlok-oauth-azure:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-oauth-gcloud:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-oauth-generic:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-oauth-salesforce:$interlokCoreVersion") {changing= true}

  testImplementation ("com.adaptris:interlok-mqtt:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-xml-security:$interlokCoreVersion") {changing= true}

  testImplementation ("com.adaptris:interlok-solace:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-webspheremq:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-xa-jms:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-xa-solace:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-xa-wmq:$interlokCoreVersion") {changing= true}
  testImplementation ("com.adaptris:interlok-xa-atomikos:$interlokCoreVersion") {changing= true}

  testImplementation ("com.adaptris:interlok-jms-sonicmq:$interlokCoreVersion") {changing= true}
  testImplementation ("com.aurea:sonic-channel:$sonicVersion")
  testImplementation ("com.aurea:sonic-client:$sonicVersion")
  testImplementation ("com.aurea:sonic-crypto:$sonicVersion")
  testImplementation ("com.aurea:sonic-xa:$sonicVersion")
  testImplementation ("com.aurea:sonic-xmessage:$sonicVersion")

  testImplementation ("com.adaptris:interlok-edi-stream:$interlokCoreVersion") {changing= true}

  testImplementation  ("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
  testImplementation  ("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
  testImplementation  ("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
  testImplementation  ("org.junit.platform:junit-platform-launcher:1.10.0")

  testImplementation  ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}

  testImplementation ("org.mockito:mockito-core:$mockitoVersion")
  testImplementation ("org.mockito:mockito-inline:$mockitoVersion")

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}
// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.version', value: project.version)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value: buildInfo())
    }
  }
}

javadoc {
  configure(options) {
    title = componentName
  }
}

test {
  useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", "Test interlok templates.")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.9.0+")
        properties.appendNode("license", "false")
        properties.appendNode("tags", "template")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugsMain {
  // showProgress = "true"
  effort = "max"
  // Ignore failures?
  // ignoreFailures = false

  // We only care about "high priority" issues...
  reportLevel = "high"
  reports {
    xml {
      enabled = false
    }
    html {
      enabled = true
    }
  }
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

task deleteGeneratedFiles(type: Delete) {
  delete 'activemq-data'
  delete 'data'
}


check.dependsOn jacocoTestReport
clean.dependsOn deleteGeneratedFiles

/**
 * The following two tasks download a ZIP file and extract its
 * contents to the build directory
 */
task downloadZipFile(type: Download) {
    src interlokTemplateZipUrl
    dest new File(buildDir, 'interlok-templates.zip')
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into new File(buildDir, '/resources/test/interlok-templates')
}

test.dependsOn downloadAndUnzipFile
